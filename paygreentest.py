#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test des cl√©s API Paygree
Permet de v√©rifier la validit√© et le fonctionnement des cl√©s API
"""

import requests
import json
import os
from datetime import datetime

class PaygreeAPITester:
    def __init__(self, api_key, secret_key=None, environment='sandbox'):
        """
        Initialise le testeur d'API Paygree
        
        Args:
            api_key (str): Cl√© API publique (obligatoire)
            secret_key (str): Cl√© secr√®te (optionnelle)
            environment (str): 'sandbox' ou 'production'
        """
        self.api_key = api_key
        self.secret_key = secret_key
        self.environment = environment
        
        # URLs de base selon l'environnement
        self.base_urls = {
            'sandbox': 'https://sandbox-api.paygree.com',
            'production': 'https://api.paygree.com'
        }
        
        self.base_url = self.base_urls.get(environment, self.base_urls['sandbox'])
        
        # Headers par d√©faut
        self.headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': f'Bearer {self.api_key}' if self.api_key else None
        }

    def print_header(self, title):
        """Affiche un en-t√™te format√©"""
        print(f"\n{'='*50}")
        print(f" {title}")
        print(f"{'='*50}")

    def print_result(self, test_name, success, message, response_data=None):
        """Affiche le r√©sultat d'un test"""
        status = "‚úÖ SUCC√àS" if success else "‚ùå √âCHEC"
        print(f"\n{test_name}: {status}")
        print(f"Message: {message}")
        
        if response_data:
            print(f"Donn√©es re√ßues: {json.dumps(response_data, indent=2, ensure_ascii=False)}")

    def test_api_connectivity(self):
        """Test de connectivit√© de base √† l'API"""
        try:
            response = requests.get(f"{self.base_url}/health", timeout=10)
            
            if response.status_code == 200:
                return True, "Connexion √† l'API r√©ussie", response.json()
            else:
                return False, f"Erreur de connexion (Code: {response.status_code})", None
                
        except requests.exceptions.RequestException as e:
            return False, f"Erreur de r√©seau: {str(e)}", None

    def test_api_key_validation(self):
        """Test de validation de la cl√© API"""
        if not self.api_key:
            return False, "Cl√© API manquante", None
            
        try:
            # Test avec un endpoint qui n√©cessite une authentification
            response = requests.get(
                f"{self.base_url}/v1/account/info",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                return True, "Cl√© API valide et authentifi√©e", response.json()
            elif response.status_code == 401:
                return False, "Cl√© API invalide ou expir√©e", None
            else:
                return False, f"Erreur d'authentification (Code: {response.status_code})", response.text
                
        except requests.exceptions.RequestException as e:
            return False, f"Erreur lors du test d'authentification: {str(e)}", None

    def test_payment_creation(self):
        """Test de cr√©ation d'un paiement fictif"""
        if not self.api_key:
            return False, "Cl√© API requise pour ce test", None
            
        test_payment_data = {
            "amount": 1000,  # 10.00 en centimes
            "currency": "XOF",  # Franc CFA
            "description": "Test de paiement - Script de validation",
            "customer": {
                "email": "test@example.com",
                "name": "Client Test"
            },
            "metadata": {
                "test": True,
                "script_version": "1.0",
                "timestamp": datetime.now().isoformat()
            }
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/v1/payments",
                headers=self.headers,
                json=test_payment_data,
                timeout=10
            )
            
            if response.status_code in [200, 201]:
                return True, "Cr√©ation de paiement test r√©ussie", response.json()
            elif response.status_code == 400:
                return False, "Donn√©es de paiement invalides", response.json()
            elif response.status_code == 401:
                return False, "Authentification √©chou√©e", None
            else:
                return False, f"Erreur lors de la cr√©ation (Code: {response.status_code})", response.text
                
        except requests.exceptions.RequestException as e:
            return False, f"Erreur r√©seau lors de la cr√©ation: {str(e)}", None

    def test_webhook_verification(self):
        """Test de v√©rification des webhooks (si cl√© secr√®te disponible)"""
        if not self.secret_key:
            return False, "Cl√© secr√®te requise pour tester les webhooks", None
            
        # Simulation d'une signature webhook
        import hmac
        import hashlib
        
        test_payload = '{"event": "payment.completed", "data": {"id": "test_payment_123"}}'
        expected_signature = hmac.new(
            self.secret_key.encode(),
            test_payload.encode(),
            hashlib.sha256
        ).hexdigest()
        
        return True, f"Simulation de signature webhook: {expected_signature[:20]}...", {
            "payload": test_payload,
            "signature": expected_signature
        }

    def run_all_tests(self):
        """Ex√©cute tous les tests disponibles"""
        self.print_header("TESTS DES CL√âS API PAYGREE")
        
        print(f"Environnement: {self.environment.upper()}")
        print(f"URL de base: {self.base_url}")
        print(f"Cl√© API: {'‚úÖ Configur√©e' if self.api_key else '‚ùå Manquante'}")
        print(f"Cl√© secr√®te: {'‚úÖ Configur√©e' if self.secret_key else '‚ùå Manquante'}")
        
        # Test 1: Connectivit√©
        self.print_header("Test 1: Connectivit√© API")
        success, message, data = self.test_api_connectivity()
        self.print_result("Connectivit√©", success, message, data)
        
        # Test 2: Validation cl√© API
        self.print_header("Test 2: Validation de la cl√© API")
        success, message, data = self.test_api_key_validation()
        self.print_result("Validation cl√© API", success, message, data)
        
        # Test 3: Cr√©ation de paiement
        self.print_header("Test 3: Cr√©ation de paiement test")
        success, message, data = self.test_payment_creation()
        self.print_result("Cr√©ation paiement", success, message, data)
        
        # Test 4: Webhooks
        self.print_header("Test 4: V√©rification webhooks")
        success, message, data = self.test_webhook_verification()
        self.print_result("Webhooks", success, message, data)
        
        self.print_header("R√âSUM√â DES TESTS TERMIN√â")

def main():
    """Fonction principale"""
    print("üöÄ Script de test des cl√©s API PayGreen")
    print("=" * 50)
    print()

    # Configuration directe des cl√©s PayGreen
    api_key = "pk_af4042561413469f9d56b328b49ba32f"  # Cl√© publique PayGreen
    secret_key = "sk_bb5039c5564c4fe89fd1a19f20a83a7a"  # Cl√© secr√®te PayGreen
    environment = 'sandbox'  # Environnement sandbox

    # R√©capitulatif de la configuration
    print(f"üìä CONFIGURATION AUTOMATIQUE")
    print("-" * 40)
    print(f"üîë Cl√© API: {api_key[:10]}...{api_key[-10:]}")
    print(f"üîê Cl√© secr√®te: {'‚úÖ Configur√©e' if secret_key else '‚ùå Non fournie'}")
    print(f"üåç Environnement: {environment.upper()}")
    print()

    # Initialisation et ex√©cution des tests
    tester = PaygreeAPITester(
        api_key=api_key,
        secret_key=secret_key if secret_key else None,
        environment=environment
    )

    tester.run_all_tests()

if __name__ == "__main__":
    main()