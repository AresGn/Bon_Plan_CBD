// This is your Prisma schema file for PostgreSQL (production)
// For development with SQLite, use a different schema if n√©cessaire

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  name           String?
  role           String    @default("USER") // Changed from enum to String for SQLite
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  orders         Order[]
  reviews        Review[]
  addresses      Address[]
  favorites      Favorite[]
}

// Product category
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
}

// Product model
model Product {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  description  String
  price        Float
  originalPrice Float?
  stock        Int       @default(0)
  images       String    // Changed from String[] to String (JSON stringified)
  cbdRate      Float
  thcRate      Float
  origin       String?
  cultivationType String?
  terpenes     String    // Changed from String[] to String (JSON stringified)
  effects      String    // Changed from String[] to String (JSON stringified)
  labAnalysis  String?
  status       String    @default("DRAFT") // Changed from enum to String
  featured     Boolean   @default(false)
  
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id])
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  orderItems   OrderItem[]
  reviews      Review[]
  favorites    Favorite[]
}

// Order model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          String      @default("PENDING") // Changed from enum to String
  total           Float
  subtotal        Float
  shipping        Float       @default(0)
  tax             Float       @default(0)
  discount        Float       @default(0)
  
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  
  email           String
  phone           String
  
  shippingAddress String      // Changed from Json to String (JSON stringified)
  billingAddress  String?     // Changed from Json to String (JSON stringified)
  
  paymentMethod   String
  paymentStatus   String      @default("PENDING") // Changed from enum to String
  paymentId       String?     // Stripe payment_intent_id ou PayGreen payment_order_id
  paymentProvider String      @default("stripe") // "stripe" ou "paygreen"
  paygreenOrderId String?     // ID du Payment Order PayGreen
  
  notes           String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  items           OrderItem[]
}

// Order items
model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  total     Float
  
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Reviews
model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(5)
  comment   String
  verified  Boolean  @default(false)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
}

// User addresses
model Address {
  id          String   @id @default(cuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String   @default("France")
  phone       String?
  isDefault   Boolean  @default(false)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Favorites
model Favorite {
  id        String   @id @default(cuid())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
}

// Settings for the store
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String // Changed from Json to String (JSON stringified)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
