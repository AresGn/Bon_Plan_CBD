// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  phone         String?
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  favorites     Favorite[]
}

enum Role {
  USER
  ADMIN
}

// Product category
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
}

// Product model
model Product {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String
  price         Float
  originalPrice Float?
  stock         Int       @default(0)
  images        String[]
  
  // CBD specific fields
  cbdRate       Float
  thcRate       Float     @default(0.2)
  origin        String?
  cultivationType CultivationType?
  terpenes      String[]
  effects       String[]
  labAnalysis   String?
  
  status        ProductStatus @default(DRAFT)
  featured      Boolean   @default(false)
  
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id])
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  orderItems    OrderItem[]
  reviews       Review[]
  favorites     Favorite[]
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum CultivationType {
  INDOOR
  OUTDOOR
  GREENHOUSE
}

// Order model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  total           Float
  subtotal        Float
  shipping        Float       @default(0)
  tax             Float       @default(0)
  discount        Float       @default(0)
  
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  
  // Guest checkout info
  email           String
  phone           String
  firstName       String
  lastName        String
  
  shippingAddress Json
  billingAddress  Json?
  
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  paymentId       String?
  
  notes           String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  items           OrderItem[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Order items
model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  total     Float
  
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Reviews
model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(5)
  title     String?
  comment   String
  verified  Boolean  @default(false)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
}

// User addresses
model Address {
  id          String   @id @default(cuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String   @default("France")
  phone       String?
  isDefault   Boolean  @default(false)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Favorites
model Favorite {
  id        String   @id @default(cuid())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
}

// Settings for the store
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
